// automatically generated by the FlatBuffers compiler, do not modify

package messaging;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class MetricsBucket extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static MetricsBucket getRootAsMetricsBucket(ByteBuffer _bb) { return getRootAsMetricsBucket(_bb, new MetricsBucket()); }
  public static MetricsBucket getRootAsMetricsBucket(ByteBuffer _bb, MetricsBucket obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MetricsBucket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int count() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createMetricsBucket(FlatBufferBuilder builder,
      int count) {
    builder.startTable(1);
    MetricsBucket.addCount(builder, count);
    return MetricsBucket.endMetricsBucket(builder);
  }

  public static void startMetricsBucket(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addCount(FlatBufferBuilder builder, int count) { builder.addInt(0, count, 0); }
  public static int endMetricsBucket(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishMetricsBucketBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedMetricsBucketBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MetricsBucket get(int j) { return get(new MetricsBucket(), j); }
    public MetricsBucket get(MetricsBucket obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

