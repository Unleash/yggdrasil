// automatically generated by the FlatBuffers compiler, do not modify

package messaging;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class CoreVersion extends Table {
  public static void ValidateVersion() {
    Constants.FLATBUFFERS_23_1_21();
  }

  public static CoreVersion getRootAsCoreVersion(ByteBuffer _bb) {
    return getRootAsCoreVersion(_bb, new CoreVersion());
  }

  public static CoreVersion getRootAsCoreVersion(ByteBuffer _bb, CoreVersion obj) {
    _bb.order(ByteOrder.LITTLE_ENDIAN);
    return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
  }

  public void __init(int _i, ByteBuffer _bb) {
    __reset(_i, _bb);
  }

  public CoreVersion __assign(int _i, ByteBuffer _bb) {
    __init(_i, _bb);
    return this;
  }

  public String version() {
    int o = __offset(4);
    return o != 0 ? __string(o + bb_pos) : null;
  }

  public ByteBuffer versionAsByteBuffer() {
    return __vector_as_bytebuffer(4, 1);
  }

  public ByteBuffer versionInByteBuffer(ByteBuffer _bb) {
    return __vector_in_bytebuffer(_bb, 4, 1);
  }

  public static int createCoreVersion(FlatBufferBuilder builder, int versionOffset) {
    builder.startTable(1);
    CoreVersion.addVersion(builder, versionOffset);
    return CoreVersion.endCoreVersion(builder);
  }

  public static void startCoreVersion(FlatBufferBuilder builder) {
    builder.startTable(1);
  }

  public static void addVersion(FlatBufferBuilder builder, int versionOffset) {
    builder.addOffset(0, versionOffset, 0);
  }

  public static int endCoreVersion(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) {
      __reset(_vector, _element_size, _bb);
      return this;
    }

    public CoreVersion get(int j) {
      return get(new CoreVersion(), j);
    }

    public CoreVersion get(CoreVersion obj, int j) {
      return obj.__assign(__indirect(__element(j), bb), bb);
    }
  }
}
