/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.getunleash.engine;

import java.nio.file.Paths;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sun.jna.*;

interface UnleashFFI extends Library {

    String libPath = System.getenv("YGGDRASIL_LIB_PATH");

    String combinedPath = Paths.get(libPath, "libyggdrasilffi.so").toString();

    UnleashFFI INSTANCE = Native.load(combinedPath, UnleashFFI.class);

    Pointer new_engine();

    void engine_free(Pointer ptr);

    Pointer take_state(Pointer ptr, String toggles);

    boolean check_enabled(Pointer ptr, String name, String context);

    Pointer check_variant(Pointer ptr, String name, String context);

    void free_response(Pointer pointer);
}

public class UnleashEngine {
    private Pointer ptr;
    private ObjectMapper mapper = new ObjectMapper();

    public UnleashEngine() {
        ptr = UnleashFFI.INSTANCE.new_engine();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public void free() {
        UnleashFFI.INSTANCE.engine_free(ptr);
    }

    public void takeState(String toggles) {
        UnleashFFI.INSTANCE.take_state(ptr, toggles);
    }

    public boolean isEnabled(String name, Context context) throws JsonProcessingException {
        String jsonContext = mapper.writeValueAsString(context);
        return UnleashFFI.INSTANCE.check_enabled(ptr, name, jsonContext);
    }

    public VariantDef getVariant(String name, Context context) throws JsonMappingException, JsonProcessingException {
        String jsonContext = mapper.writeValueAsString(context);
        Pointer variantDefPtr = UnleashFFI.INSTANCE.check_variant(ptr, name, jsonContext);
        String variantJson = variantDefPtr.getString(0);
        UnleashFFI.INSTANCE.free_response(variantDefPtr);
        return mapper.readValue(variantJson, VariantDef.class);
    }
}