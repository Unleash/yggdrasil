/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.getunleash.engine;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Pointer;

import java.nio.file.Paths;

interface UnleashFFI extends Library {

    String libPath = System.getenv("YGGDRASIL_LIB_PATH");

    String combinedPath = Paths.get(libPath, "libyggdrasilffi.so").toString();

    UnleashFFI INSTANCE = Native.load(combinedPath, UnleashFFI.class);

    Pointer new_engine();

    void engine_free(Pointer ptr);

    Pointer take_state(Pointer ptr, String toggles);

    Pointer check_enabled(Pointer ptr, String name, String context);

    Pointer check_variant(Pointer ptr, String name, String context);

    void free_response(Pointer pointer);
}

public class UnleashEngine {
    private static final String UTF_8 = "UTF-8";
    private final Pointer enginePtr;
    private final ObjectMapper mapper;

    public UnleashEngine() {
        enginePtr = UnleashFFI.INSTANCE.new_engine();
        mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public void free() {
        UnleashFFI.INSTANCE.engine_free(enginePtr);
    }

    public void takeState(String toggles) throws YggdrasilInvalidInputException {
        TakeStateResponse response = read(UnleashFFI.INSTANCE.take_state(enginePtr, toggles), TakeStateResponse.class);
        if (!response.isValid()) {
            throw new YggdrasilInvalidInputException(toggles);
        }
    }

    <T> T read(Pointer pointer, Class<T> clazz) {
        String str = pointer.getString(0, UTF_8);
        UnleashFFI.INSTANCE.free_response(pointer);
        try {
            System.out.println(str); // TODO use a logging library. SLF4J?
            return mapper.readValue(str, clazz);
        } catch (JsonProcessingException e) {
            throw new YggdrasilParseException(str, clazz, e);
        }
    }

    public boolean isEnabled(String name, Context context) throws YggdrasilInvalidInputException {
        try {
            String jsonContext = mapper.writeValueAsString(context);
            IsEnabledResponse isEnabled = read(UnleashFFI.INSTANCE.check_enabled(enginePtr, name, jsonContext), IsEnabledResponse.class);
            return isEnabled.isEnabled();
        } catch (JsonProcessingException e) {
            throw new YggdrasilInvalidInputException(context);
        }
    }

    public VariantResponse getVariant(String name, Context context) throws YggdrasilInvalidInputException {
        try {
            String jsonContext = mapper.writeValueAsString(context);
            return read(UnleashFFI.INSTANCE.check_variant(enginePtr, name, jsonContext), VariantResponse.class);
        } catch (JsonProcessingException e) {
            throw new YggdrasilInvalidInputException(context);
        }
    }
}