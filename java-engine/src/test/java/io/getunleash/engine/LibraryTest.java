/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.getunleash.engine;

import messaging.MetricsBucket;
import messaging.ToggleEntry;
import org.junit.jupiter.api.Test;

public class LibraryTest {
  @Test
  public void engineCanBeNewedUpWithoutError() throws Exception {
    new UnleashEngine();
  }

  @Test
  public void takeStateLoadsJsonCorrectly() throws Exception {
    var engine = new UnleashEngine();

    String path = "../test-data/simple.json";
    String json = new String(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(path)));
    engine.takeState(json);
  }

  @Test
  public void isEnabledReturnsCorrectResult() throws Exception {
    var engine = new UnleashEngine();

    String path = "../test-data/simple.json";
    String json = new String(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(path)));
    engine.takeState(json);
    boolean result = engine.isEnabled("Feature.A", new Context());
    assert (result);
  }

  @Test
  public void getMetricsReturnsCorrectResult() throws Exception {
    var engine = new UnleashEngine();
    String path = "../test-data/simple.json";
    String json = new String(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(path)));
    engine.takeState(json);
    boolean result = engine.isEnabled("Feature.A", new Context());
    boolean result2 = engine.isEnabled("Feature.C", new Context());
    boolean result3 = engine.isEnabled("Feature.C", new Context());
    MetricsBucket bucket = engine.getMetrics();
    ToggleEntry featA =
        bucket.toggles(0).key().equals("Feature.A") ? bucket.toggles(0) : bucket.toggles(1);
    ToggleEntry featC =
        bucket.toggles(0).key().equals("Feature.C") ? bucket.toggles(0) : bucket.toggles(1);
    assert (featA.value().yes() == 1);
    assert (featC.value().yes() == 2);
  }

  @Test
  public void getEmptyMetricsBucketReturnsNull() throws Exception {
    var engine = new UnleashEngine();
    String path = "../test-data/simple.json";
    String json = new String(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(path)));
    engine.takeState(json);
    MetricsBucket bucket = engine.getMetrics();
    assert (bucket == null);
  }
}
