name: Publish Ruby
on:
  workflow_dispatch:

jobs:

  build_single_binary_gems:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - binary: libyggdrasilffi_x86_64.so
            platform: x86_64-linux
          - binary: libyggdrasilffi_arm64.so
            platform: arm-linux
          - binary: libyggdrasilffi_x86_64-linux-musl.so
            platform: x86_64-linux-musl
          - binary: libyggdrasilffi_arm64-musl.so
            platform: aarch64-linux-musl
          - binary: yggdrasilffi_x86_64.dll
            platform: x64-mingw32
          - binary: yggdrasilffi_x86_64.dylib
            platform: x86_64-darwin
          - binary: libyggdrasilffi_arm64.dylib
            platform: arm64-darwin
          - binary: libyggdrasilffi_arm64.dll
            platform: arm64-mingw32

    steps:
      - uses: actions/checkout@v4

      - name: Overwrite Build Platform
        if: matrix.platform != ''
        run: echo "YGG_BUILD_PLATFORM=${{ matrix.platform }}" >> $GITHUB_ENV

      - name: Extract Yggdrasil Core Version
        run: |
          cd ruby-engine
          CORE_VERSION=$(ruby -e "puts Gem::Specification.load('yggdrasil-engine.gemspec').metadata['yggdrasil_core_version']")
          echo "FFI Library Version: $CORE_VERSION"
          echo "CORE_VERSION=$CORE_VERSION" >> $GITHUB_ENV

      - name: Download Binary
        run: |
          BINARY_URL="https://github.com/${{ github.repository }}/releases/download/${CORE_VERSION}/${{ matrix.binary }}"
          TARGET_DIR="ruby-engine/lib"

          mkdir -p "$TARGET_DIR"
          curl -L -o "$TARGET_DIR/${{ matrix.binary }}" \
            -H "Authorization: token $GITHUB_TOKEN" \
            "$BINARY_URL"

          if [ -f "$TARGET_DIR/${{ matrix.binary }}" ]; then
            echo "${{ matrix.binary }} downloaded successfully to $TARGET_DIR."
          else
            echo "Error: ${{ matrix.binary }} could not be downloaded."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Publish Linux Gem
        run: |
          cd ruby-engine
          gem build yggdrasil-engine.gemspec
          gem push *.gem
        working-directory: ${{ github.workspace }}
        env:
          GEM_HOST_API_KEY: ${{ secrets.GEMS_PUBLISH_KEY }}

  build_jruby_gems:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - java: 8
            ruby: jruby-9.2
          - java: 11
            ruby: jruby-9.3
          - java: 17
            ruby: jruby-9.4
          - java: 21
            ruby: jruby-9.4

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'

      - name: Setup JRuby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}

      - name: Extract Yggdrasil Core Version
        run: |
          cd ruby-engine
          CORE_VERSION=$(ruby -e "puts Gem::Specification.load('yggdrasil-engine.gemspec').metadata['yggdrasil_core_version']")
          echo "FFI Library Version: $CORE_VERSION"
          echo "CORE_VERSION=$CORE_VERSION" >> $GITHUB_ENV

      - name: Set up Binary List
        env:
          CORE_VERSION: ${{ github.event.inputs.release_version }}
        run: |
          # List of binaries we want to download
          binaries=(
            "libyggdrasilffi_x86_64.so"
            "libyggdrasilffi_arm64.so"
            "libyggdrasilffi_x86_64-linux-musl.so"
            "libyggdrasilffi_arm64-musl.so"
            "yggdrasilffi_x86_64.dll"
            "yggdrasilffi_x86_64.dylib"
            "libyggdrasilffi_arm64.dylib"
            "libyggdrasilffi_arm64.dll"
          )
          echo "binaries=${binaries[@]}" >> $GITHUB_ENV

      - name: Download All Binaries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CORE_VERSION: ${{ env.CORE_VERSION }}
        run: |
          TARGET_DIR="ruby-engine/lib"
          mkdir -p "$TARGET_DIR"

          # Loop through each binary and download it
          for binary in ${binaries[@]}; do
            echo "Downloading $binary..."
            curl -L -o "$TARGET_DIR/$binary" \
              -H "Authorization: token $GITHUB_TOKEN" \
              "https://github.com/${{ github.repository }}/releases/download/${CORE_VERSION}/$binary"

            if [ -f "$TARGET_DIR/$binary" ]; then
              echo "$binary downloaded successfully."
            else
              echo "Error: $binary could not be downloaded."
              exit 1
            fi
          done

      - name: Build and Publish Gem for JRuby
        run: |
          cd ruby-engine
          gem build yggdrasil-engine.gemspec
          gem push *.gem
        working-directory: ${{ github.workspace }}
        env:
          GEM_HOST_API_KEY: ${{ secrets.GEMS_PUBLISH_KEY }}
