name: Publish .NET
on:
  workflow_dispatch:

jobs:

  publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Extract Yggdrasil Core Version
        id: extract_ffi_version
        run: |
          sudo apt-get install -y xmlstarlet
          cd dotnet-engine/Yggdrasil.Engine
          CORE_VERSION=$(xmlstarlet sel -t -v "/Project/PropertyGroup/YggdrasilCoreVersion" -n Yggdrasil.Engine.csproj)
          echo "FFI Library Version: $CORE_VERSION"
          echo "CORE_VERSION=$CORE_VERSION" >> $GITHUB_ENV

      - name: Download and Organize Binaries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          binaries=("libyggdrasilffi_aarch64.so dotnet-engine/runtimes/linux-aarch64/native libyggdrasilffi.so"
                    "libyggdrasilffi_arm64.so dotnet-engine/runtimes/linux-arm64/native libyggdrasilffi.so"
                    "libyggdrasilffi_x86_64.so dotnet-engine/runtimes/linux-x64/native libyggdrasilffi.so"
                    "libyggdrasilffi_arm64.dll dotnet-engine/runtimes/win-arm64/native yggdrasilffi.dll"
                    "libyggdrasilffi_x86_64.dll dotnet-engine/runtimes/win-x64/native yggdrasilffi.dll"
                    "libyggdrasilffi_arm64.dylib dotnet-engine/runtimes/osx-arm64/native libyggdrasilffi.dylib"
                    "libyggdrasilffi_x86_64.dylib dotnet-engine/runtimes/osx-x64/native libyggdrasilffi.dylib")

          for binary in "${binaries[@]}"; do
            # Split each item into source (release name) and target path
            src_name=$(echo "$binary" | awk '{print $1}')
            target_path=$(echo "$binary" | awk '{print $2}')
            binary_name=$(echo "$binary" | awk '{print $3}')

            echo "Downloading $src_name to $target_path..."

            mkdir -p "$target_path"

            curl -L -o "$target_path/$binary_name" \
              -H "Authorization: token $GITHUB_TOKEN" \
              "https://github.com/${{ github.repository }}/releases/tag/unleash-yggdrasil-v${CORE_VERSION}/${src_name}"

            echo "Downloaded from https://github.com/${{ github.repository }}/releases/tag/unleash-yggdrasil-v${CORE_VERSION}/${src_name}"

            if [ -f "$target_path/$binary_name" ]; then
              echo "$src_name downloaded successfully to $target_path."
            else
              echo "Error: $src_name could not be downloaded to $target_path."
              exit 1
            fi
            ls -l "$target_path"
          done
          echo "Downloaded binaries"

      - name: Build
        run: |
          cd dotnet-engine
          dotnet restore dotnet-engine.sln
          dotnet build dotnet-engine.sln -c Release --no-restore
          dotnet pack dotnet-engine.sln -c Release --no-build --no-restore

      - name: Check package size
        run: |
          cd dotnet-engine
          ls -lh Yggdrasil.Engine/bin/Release/*nupkg

      - name: Publish package
        run: |
          cd dotnet-engine
          # dotnet nuget push Yggdrasil.Engine/bin/Release/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
