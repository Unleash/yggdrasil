name: .NET Publish
on:
  workflow_dispatch:

jobs:

  publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Extract Yggdrasil Core Version
        id: extract_ffi_version
        run: |
          sudo apt-get install -y xmlstarlet
          cd dotnet-engine/Yggdrasil.Engine
          CORE_VERSION=$(xmlstarlet sel -t -v "/Project/PropertyGroup/YggdrasilCoreVersion" -n Yggdrasil.Engine.csproj)
          echo "FFI Library Version: $CORE_VERSION"
          echo "CORE_VERSION=$CORE_VERSION" >> $GITHUB_ENV

      - name: Set up artifact names
        env:
          RELEASE_VERSION: ${{ github.event.inputs.release_version }}
        run: |
          declare -A binaries
          binaries=(
            ["libyggdrasilffi_aarch64.so"]="linux/aarch64/libyggdrasilffi.so"
            ["libyggdrasilffi_arm64.dll"]="windows/arm64/libyggdrasilffi.dll"
            ["libyggdrasilffi_arm64.dylib"]="macos/arm64/libyggdrasilffi.dylib"
            ["libyggdrasilffi_arm64.so"]="linux/arm/libyggdrasilffi.so"
            ["libyggdrasilffi_x86_64.dll"]="windows/x86_64/libyggdrasilffi.dll"
            ["libyggdrasilffi_x86_64.dylib"]="macos/x86_64/libyggdrasilffi.dylib"
            ["libyggdrasilffi_x86_64.so"]="linux/x86_64/libyggdrasilffi.so"
          )

          echo "binaries=${!binaries[@]}" >> $GITHUB_ENV

      - name: Download and Organize Binaries
        env:
          RELEASE_VERSION: ${{ github.event.inputs.release_version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for binary in ${binaries[@]}; do
            target_path="${binaries[$binary]}"
            echo "Downloading $binary to $target_path..."

            # Create the target directory if it doesn't exist
            mkdir -p "$(dirname "$target_path")"

            # Direct download using GitHub's direct URL pattern
            curl -L -o "$target_path" \
              -H "Authorization: token $GITHUB_TOKEN" \
              "https://github.com/${{ github.repository }}/releases/download/${RELEASE_VERSION}/$binary"

            if [ -f "$target_path" ]; then
              echo "$binary downloaded successfully to $target_path."
            else
              echo "Error: $binary could not be downloaded to $target_path."
            fi
          done

      - name: Verify Downloaded Files
        run: |
          echo "Downloaded binaries:"
          find . -type f -name "libyggdrasilffi*"

      - name: Build
        run: |
          cd dotnet-engine
          dotnet restore dotnet-engine.sln
          dotnet build dotnet-engine.sln -c Release --no-restore
          dotnet pack dotnet-engine.sln -c Release --no-build --no-restore

      - name: Check package size
        run: |
          cd dotnet-engine
          ls -lh Yggdrasil.Engine/bin/Release/*nupkg

      # - name: Upload package artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: yggdrasil-nuget
      #     path: dotnet-engine/Yggdrasil.Engine/bin/Release/*nupkg

      # - name: Publish package
      #   run: |
      #     cd dotnet-engine
      #     dotnet nuget push Yggdrasil.Engine/bin/Release/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
