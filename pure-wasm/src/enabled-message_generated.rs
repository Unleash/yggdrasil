// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod messaging {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum PropertyEntryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PropertyEntry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PropertyEntry<'a> {
  type Inner = PropertyEntry<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PropertyEntry<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PropertyEntry { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PropertyEntryArgs<'args>
  ) -> flatbuffers::WIPOffset<PropertyEntry<'bldr>> {
    let mut builder = PropertyEntryBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    if let Some(x) = args.key { builder.add_key(x); }
    builder.finish()
  }


  #[inline]
  pub fn key(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PropertyEntry::VT_KEY, None).unwrap()}
  }
  #[inline]
  pub fn key_compare_less_than(&self, o: &PropertyEntry) -> bool {
    self.key() < o.key()
  }

  #[inline]
  pub fn key_compare_with_value(&self, val: & str) -> ::core::cmp::Ordering {
    let key = self.key();
    key.cmp(val)
  }
  #[inline]
  pub fn value(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PropertyEntry::VT_VALUE, None)}
  }
}

impl flatbuffers::Verifiable for PropertyEntry<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("key", Self::VT_KEY, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct PropertyEntryArgs<'a> {
    pub key: Option<flatbuffers::WIPOffset<&'a str>>,
    pub value: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for PropertyEntryArgs<'a> {
  #[inline]
  fn default() -> Self {
    PropertyEntryArgs {
      key: None, // required field
      value: None,
    }
  }
}

pub struct PropertyEntryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PropertyEntryBuilder<'a, 'b> {
  #[inline]
  pub fn add_key(&mut self, key: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PropertyEntry::VT_KEY, key);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PropertyEntry::VT_VALUE, value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PropertyEntryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PropertyEntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PropertyEntry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, PropertyEntry::VT_KEY,"key");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PropertyEntry<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PropertyEntry");
      ds.field("key", &self.key());
      ds.field("value", &self.value());
      ds.finish()
  }
}
pub enum ContextMessageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ContextMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ContextMessage<'a> {
  type Inner = ContextMessage<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ContextMessage<'a> {
  pub const VT_TOGGLE_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_USER_ID: flatbuffers::VOffsetT = 6;
  pub const VT_SESSION_ID: flatbuffers::VOffsetT = 8;
  pub const VT_ENVIRONMENT: flatbuffers::VOffsetT = 10;
  pub const VT_APP_NAME: flatbuffers::VOffsetT = 12;
  pub const VT_CURRENT_TIME: flatbuffers::VOffsetT = 14;
  pub const VT_REMOTE_ADDRESS: flatbuffers::VOffsetT = 16;
  pub const VT_PROPERTIES: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ContextMessage { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ContextMessageArgs<'args>
  ) -> flatbuffers::WIPOffset<ContextMessage<'bldr>> {
    let mut builder = ContextMessageBuilder::new(_fbb);
    if let Some(x) = args.properties { builder.add_properties(x); }
    if let Some(x) = args.remote_address { builder.add_remote_address(x); }
    if let Some(x) = args.current_time { builder.add_current_time(x); }
    if let Some(x) = args.app_name { builder.add_app_name(x); }
    if let Some(x) = args.environment { builder.add_environment(x); }
    if let Some(x) = args.session_id { builder.add_session_id(x); }
    if let Some(x) = args.user_id { builder.add_user_id(x); }
    if let Some(x) = args.toggle_name { builder.add_toggle_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn toggle_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContextMessage::VT_TOGGLE_NAME, None)}
  }
  #[inline]
  pub fn user_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContextMessage::VT_USER_ID, None)}
  }
  #[inline]
  pub fn session_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContextMessage::VT_SESSION_ID, None)}
  }
  #[inline]
  pub fn environment(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContextMessage::VT_ENVIRONMENT, None)}
  }
  #[inline]
  pub fn app_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContextMessage::VT_APP_NAME, None)}
  }
  #[inline]
  pub fn current_time(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContextMessage::VT_CURRENT_TIME, None)}
  }
  #[inline]
  pub fn remote_address(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContextMessage::VT_REMOTE_ADDRESS, None)}
  }
  #[inline]
  pub fn properties(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PropertyEntry<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PropertyEntry>>>>(ContextMessage::VT_PROPERTIES, None)}
  }
}

impl flatbuffers::Verifiable for ContextMessage<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("toggle_name", Self::VT_TOGGLE_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("user_id", Self::VT_USER_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("session_id", Self::VT_SESSION_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("environment", Self::VT_ENVIRONMENT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("app_name", Self::VT_APP_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("current_time", Self::VT_CURRENT_TIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("remote_address", Self::VT_REMOTE_ADDRESS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PropertyEntry>>>>("properties", Self::VT_PROPERTIES, false)?
     .finish();
    Ok(())
  }
}
pub struct ContextMessageArgs<'a> {
    pub toggle_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub user_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub session_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub environment: Option<flatbuffers::WIPOffset<&'a str>>,
    pub app_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub current_time: Option<flatbuffers::WIPOffset<&'a str>>,
    pub remote_address: Option<flatbuffers::WIPOffset<&'a str>>,
    pub properties: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PropertyEntry<'a>>>>>,
}
impl<'a> Default for ContextMessageArgs<'a> {
  #[inline]
  fn default() -> Self {
    ContextMessageArgs {
      toggle_name: None,
      user_id: None,
      session_id: None,
      environment: None,
      app_name: None,
      current_time: None,
      remote_address: None,
      properties: None,
    }
  }
}

pub struct ContextMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ContextMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_toggle_name(&mut self, toggle_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_TOGGLE_NAME, toggle_name);
  }
  #[inline]
  pub fn add_user_id(&mut self, user_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_USER_ID, user_id);
  }
  #[inline]
  pub fn add_session_id(&mut self, session_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_SESSION_ID, session_id);
  }
  #[inline]
  pub fn add_environment(&mut self, environment: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_ENVIRONMENT, environment);
  }
  #[inline]
  pub fn add_app_name(&mut self, app_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_APP_NAME, app_name);
  }
  #[inline]
  pub fn add_current_time(&mut self, current_time: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_CURRENT_TIME, current_time);
  }
  #[inline]
  pub fn add_remote_address(&mut self, remote_address: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_REMOTE_ADDRESS, remote_address);
  }
  #[inline]
  pub fn add_properties(&mut self, properties: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PropertyEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_PROPERTIES, properties);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ContextMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ContextMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ContextMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ContextMessage<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ContextMessage");
      ds.field("toggle_name", &self.toggle_name());
      ds.field("user_id", &self.user_id());
      ds.field("session_id", &self.session_id());
      ds.field("environment", &self.environment());
      ds.field("app_name", &self.app_name());
      ds.field("current_time", &self.current_time());
      ds.field("remote_address", &self.remote_address());
      ds.field("properties", &self.properties());
      ds.finish()
  }
}
pub enum ResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Response<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Response<'a> {
  type Inner = Response<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Response<'a> {
  pub const VT_ENABLED: flatbuffers::VOffsetT = 4;
  pub const VT_HAS_ENABLED: flatbuffers::VOffsetT = 6;
  pub const VT_ERROR: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Response { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<Response<'bldr>> {
    let mut builder = ResponseBuilder::new(_fbb);
    if let Some(x) = args.error { builder.add_error(x); }
    builder.add_has_enabled(args.has_enabled);
    builder.add_enabled(args.enabled);
    builder.finish()
  }


  #[inline]
  pub fn enabled(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Response::VT_ENABLED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn has_enabled(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Response::VT_HAS_ENABLED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn error(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Response::VT_ERROR, None)}
  }
}

impl flatbuffers::Verifiable for Response<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("enabled", Self::VT_ENABLED, false)?
     .visit_field::<bool>("has_enabled", Self::VT_HAS_ENABLED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("error", Self::VT_ERROR, false)?
     .finish();
    Ok(())
  }
}
pub struct ResponseArgs<'a> {
    pub enabled: bool,
    pub has_enabled: bool,
    pub error: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    ResponseArgs {
      enabled: false,
      has_enabled: false,
      error: None,
    }
  }
}

pub struct ResponseBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ResponseBuilder<'a, 'b> {
  #[inline]
  pub fn add_enabled(&mut self, enabled: bool) {
    self.fbb_.push_slot::<bool>(Response::VT_ENABLED, enabled, false);
  }
  #[inline]
  pub fn add_has_enabled(&mut self, has_enabled: bool) {
    self.fbb_.push_slot::<bool>(Response::VT_HAS_ENABLED, has_enabled, false);
  }
  #[inline]
  pub fn add_error(&mut self, error: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Response::VT_ERROR, error);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ResponseBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Response<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Response<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Response");
      ds.field("enabled", &self.enabled());
      ds.field("has_enabled", &self.has_enabled());
      ds.field("error", &self.error());
      ds.finish()
  }
}
pub enum VariantEntryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct VariantEntry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VariantEntry<'a> {
  type Inner = VariantEntry<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VariantEntry<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VariantEntry { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args VariantEntryArgs<'args>
  ) -> flatbuffers::WIPOffset<VariantEntry<'bldr>> {
    let mut builder = VariantEntryBuilder::new(_fbb);
    builder.add_value(args.value);
    if let Some(x) = args.key { builder.add_key(x); }
    builder.finish()
  }


  #[inline]
  pub fn key(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(VariantEntry::VT_KEY, None)}
  }
  #[inline]
  pub fn value(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(VariantEntry::VT_VALUE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for VariantEntry<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("key", Self::VT_KEY, false)?
     .visit_field::<u32>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct VariantEntryArgs<'a> {
    pub key: Option<flatbuffers::WIPOffset<&'a str>>,
    pub value: u32,
}
impl<'a> Default for VariantEntryArgs<'a> {
  #[inline]
  fn default() -> Self {
    VariantEntryArgs {
      key: None,
      value: 0,
    }
  }
}

pub struct VariantEntryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> VariantEntryBuilder<'a, 'b> {
  #[inline]
  pub fn add_key(&mut self, key: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VariantEntry::VT_KEY, key);
  }
  #[inline]
  pub fn add_value(&mut self, value: u32) {
    self.fbb_.push_slot::<u32>(VariantEntry::VT_VALUE, value, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> VariantEntryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    VariantEntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VariantEntry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VariantEntry<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VariantEntry");
      ds.field("key", &self.key());
      ds.field("value", &self.value());
      ds.finish()
  }
}
pub enum ToggleStatsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ToggleStats<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ToggleStats<'a> {
  type Inner = ToggleStats<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ToggleStats<'a> {
  pub const VT_NO: flatbuffers::VOffsetT = 4;
  pub const VT_YES: flatbuffers::VOffsetT = 6;
  pub const VT_VARIANTS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ToggleStats { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ToggleStatsArgs<'args>
  ) -> flatbuffers::WIPOffset<ToggleStats<'bldr>> {
    let mut builder = ToggleStatsBuilder::new(_fbb);
    if let Some(x) = args.variants { builder.add_variants(x); }
    builder.add_yes(args.yes);
    builder.add_no(args.no);
    builder.finish()
  }


  #[inline]
  pub fn no(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ToggleStats::VT_NO, Some(0)).unwrap()}
  }
  #[inline]
  pub fn yes(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ToggleStats::VT_YES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn variants(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VariantEntry<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VariantEntry>>>>(ToggleStats::VT_VARIANTS, None)}
  }
}

impl flatbuffers::Verifiable for ToggleStats<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("no", Self::VT_NO, false)?
     .visit_field::<u32>("yes", Self::VT_YES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<VariantEntry>>>>("variants", Self::VT_VARIANTS, false)?
     .finish();
    Ok(())
  }
}
pub struct ToggleStatsArgs<'a> {
    pub no: u32,
    pub yes: u32,
    pub variants: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VariantEntry<'a>>>>>,
}
impl<'a> Default for ToggleStatsArgs<'a> {
  #[inline]
  fn default() -> Self {
    ToggleStatsArgs {
      no: 0,
      yes: 0,
      variants: None,
    }
  }
}

pub struct ToggleStatsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ToggleStatsBuilder<'a, 'b> {
  #[inline]
  pub fn add_no(&mut self, no: u32) {
    self.fbb_.push_slot::<u32>(ToggleStats::VT_NO, no, 0);
  }
  #[inline]
  pub fn add_yes(&mut self, yes: u32) {
    self.fbb_.push_slot::<u32>(ToggleStats::VT_YES, yes, 0);
  }
  #[inline]
  pub fn add_variants(&mut self, variants: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<VariantEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ToggleStats::VT_VARIANTS, variants);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ToggleStatsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ToggleStatsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ToggleStats<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ToggleStats<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ToggleStats");
      ds.field("no", &self.no());
      ds.field("yes", &self.yes());
      ds.field("variants", &self.variants());
      ds.finish()
  }
}
pub enum ToggleEntryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ToggleEntry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ToggleEntry<'a> {
  type Inner = ToggleEntry<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ToggleEntry<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ToggleEntry { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ToggleEntryArgs<'args>
  ) -> flatbuffers::WIPOffset<ToggleEntry<'bldr>> {
    let mut builder = ToggleEntryBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    if let Some(x) = args.key { builder.add_key(x); }
    builder.finish()
  }


  #[inline]
  pub fn key(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ToggleEntry::VT_KEY, None)}
  }
  #[inline]
  pub fn value(&self) -> Option<ToggleStats<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ToggleStats>>(ToggleEntry::VT_VALUE, None)}
  }
}

impl flatbuffers::Verifiable for ToggleEntry<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("key", Self::VT_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ToggleStats>>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct ToggleEntryArgs<'a> {
    pub key: Option<flatbuffers::WIPOffset<&'a str>>,
    pub value: Option<flatbuffers::WIPOffset<ToggleStats<'a>>>,
}
impl<'a> Default for ToggleEntryArgs<'a> {
  #[inline]
  fn default() -> Self {
    ToggleEntryArgs {
      key: None,
      value: None,
    }
  }
}

pub struct ToggleEntryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ToggleEntryBuilder<'a, 'b> {
  #[inline]
  pub fn add_key(&mut self, key: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ToggleEntry::VT_KEY, key);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<ToggleStats<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ToggleStats>>(ToggleEntry::VT_VALUE, value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ToggleEntryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ToggleEntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ToggleEntry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ToggleEntry<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ToggleEntry");
      ds.field("key", &self.key());
      ds.field("value", &self.value());
      ds.finish()
  }
}
pub enum MetricsBucketOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MetricsBucket<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MetricsBucket<'a> {
  type Inner = MetricsBucket<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MetricsBucket<'a> {
  pub const VT_START: flatbuffers::VOffsetT = 4;
  pub const VT_STOP: flatbuffers::VOffsetT = 6;
  pub const VT_TOGGLES: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MetricsBucket { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args MetricsBucketArgs<'args>
  ) -> flatbuffers::WIPOffset<MetricsBucket<'bldr>> {
    let mut builder = MetricsBucketBuilder::new(_fbb);
    builder.add_stop(args.stop);
    builder.add_start(args.start);
    if let Some(x) = args.toggles { builder.add_toggles(x); }
    builder.finish()
  }


  #[inline]
  pub fn start(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MetricsBucket::VT_START, Some(0)).unwrap()}
  }
  #[inline]
  pub fn stop(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MetricsBucket::VT_STOP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn toggles(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ToggleEntry<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ToggleEntry>>>>(MetricsBucket::VT_TOGGLES, None)}
  }
}

impl flatbuffers::Verifiable for MetricsBucket<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("start", Self::VT_START, false)?
     .visit_field::<i64>("stop", Self::VT_STOP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ToggleEntry>>>>("toggles", Self::VT_TOGGLES, false)?
     .finish();
    Ok(())
  }
}
pub struct MetricsBucketArgs<'a> {
    pub start: i64,
    pub stop: i64,
    pub toggles: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ToggleEntry<'a>>>>>,
}
impl<'a> Default for MetricsBucketArgs<'a> {
  #[inline]
  fn default() -> Self {
    MetricsBucketArgs {
      start: 0,
      stop: 0,
      toggles: None,
    }
  }
}

pub struct MetricsBucketBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> MetricsBucketBuilder<'a, 'b> {
  #[inline]
  pub fn add_start(&mut self, start: i64) {
    self.fbb_.push_slot::<i64>(MetricsBucket::VT_START, start, 0);
  }
  #[inline]
  pub fn add_stop(&mut self, stop: i64) {
    self.fbb_.push_slot::<i64>(MetricsBucket::VT_STOP, stop, 0);
  }
  #[inline]
  pub fn add_toggles(&mut self, toggles: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ToggleEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MetricsBucket::VT_TOGGLES, toggles);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MetricsBucketBuilder<'a, 'b> {
    let start = _fbb.start_table();
    MetricsBucketBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MetricsBucket<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MetricsBucket<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MetricsBucket");
      ds.field("start", &self.start());
      ds.field("stop", &self.stop());
      ds.field("toggles", &self.toggles());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `MetricsBucket`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_metrics_bucket_unchecked`.
pub fn root_as_metrics_bucket(buf: &[u8]) -> Result<MetricsBucket, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<MetricsBucket>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MetricsBucket` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_metrics_bucket_unchecked`.
pub fn size_prefixed_root_as_metrics_bucket(buf: &[u8]) -> Result<MetricsBucket, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<MetricsBucket>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MetricsBucket` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_metrics_bucket_unchecked`.
pub fn root_as_metrics_bucket_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MetricsBucket<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<MetricsBucket<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MetricsBucket` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_metrics_bucket_unchecked`.
pub fn size_prefixed_root_as_metrics_bucket_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MetricsBucket<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<MetricsBucket<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MetricsBucket and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MetricsBucket`.
pub unsafe fn root_as_metrics_bucket_unchecked(buf: &[u8]) -> MetricsBucket {
  flatbuffers::root_unchecked::<MetricsBucket>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MetricsBucket and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MetricsBucket`.
pub unsafe fn size_prefixed_root_as_metrics_bucket_unchecked(buf: &[u8]) -> MetricsBucket {
  flatbuffers::size_prefixed_root_unchecked::<MetricsBucket>(buf)
}
#[inline]
pub fn finish_metrics_bucket_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<MetricsBucket<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_metrics_bucket_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<MetricsBucket<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod messaging

