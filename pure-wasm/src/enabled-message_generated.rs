// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod messaging {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum PropertyEntryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PropertyEntry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PropertyEntry<'a> {
  type Inner = PropertyEntry<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PropertyEntry<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PropertyEntry { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PropertyEntryArgs<'args>
  ) -> flatbuffers::WIPOffset<PropertyEntry<'bldr>> {
    let mut builder = PropertyEntryBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    if let Some(x) = args.key { builder.add_key(x); }
    builder.finish()
  }


  #[inline]
  pub fn key(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PropertyEntry::VT_KEY, None).unwrap()}
  }
  #[inline]
  pub fn key_compare_less_than(&self, o: &PropertyEntry) -> bool {
    self.key() < o.key()
  }

  #[inline]
  pub fn key_compare_with_value(&self, val: & str) -> ::core::cmp::Ordering {
    let key = self.key();
    key.cmp(val)
  }
  #[inline]
  pub fn value(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PropertyEntry::VT_VALUE, None)}
  }
}

impl flatbuffers::Verifiable for PropertyEntry<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("key", Self::VT_KEY, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct PropertyEntryArgs<'a> {
    pub key: Option<flatbuffers::WIPOffset<&'a str>>,
    pub value: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for PropertyEntryArgs<'a> {
  #[inline]
  fn default() -> Self {
    PropertyEntryArgs {
      key: None, // required field
      value: None,
    }
  }
}

pub struct PropertyEntryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PropertyEntryBuilder<'a, 'b> {
  #[inline]
  pub fn add_key(&mut self, key: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PropertyEntry::VT_KEY, key);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PropertyEntry::VT_VALUE, value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PropertyEntryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PropertyEntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PropertyEntry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, PropertyEntry::VT_KEY,"key");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PropertyEntry<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PropertyEntry");
      ds.field("key", &self.key());
      ds.field("value", &self.value());
      ds.finish()
  }
}
pub enum ContextMessageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ContextMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ContextMessage<'a> {
  type Inner = ContextMessage<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ContextMessage<'a> {
  pub const VT_TOGGLE_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_USER_ID: flatbuffers::VOffsetT = 6;
  pub const VT_SESSION_ID: flatbuffers::VOffsetT = 8;
  pub const VT_ENVIRONMENT: flatbuffers::VOffsetT = 10;
  pub const VT_APP_NAME: flatbuffers::VOffsetT = 12;
  pub const VT_CURRENT_TIME: flatbuffers::VOffsetT = 14;
  pub const VT_REMOTE_ADDRESS: flatbuffers::VOffsetT = 16;
  pub const VT_RUNTIME_HOSTNAME: flatbuffers::VOffsetT = 18;
  pub const VT_PROPERTIES: flatbuffers::VOffsetT = 20;
  pub const VT_CUSTOM_STRATEGIES_RESULTS: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ContextMessage { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ContextMessageArgs<'args>
  ) -> flatbuffers::WIPOffset<ContextMessage<'bldr>> {
    let mut builder = ContextMessageBuilder::new(_fbb);
    if let Some(x) = args.custom_strategies_results { builder.add_custom_strategies_results(x); }
    if let Some(x) = args.properties { builder.add_properties(x); }
    if let Some(x) = args.runtime_hostname { builder.add_runtime_hostname(x); }
    if let Some(x) = args.remote_address { builder.add_remote_address(x); }
    if let Some(x) = args.current_time { builder.add_current_time(x); }
    if let Some(x) = args.app_name { builder.add_app_name(x); }
    if let Some(x) = args.environment { builder.add_environment(x); }
    if let Some(x) = args.session_id { builder.add_session_id(x); }
    if let Some(x) = args.user_id { builder.add_user_id(x); }
    if let Some(x) = args.toggle_name { builder.add_toggle_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn toggle_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContextMessage::VT_TOGGLE_NAME, None)}
  }
  #[inline]
  pub fn user_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContextMessage::VT_USER_ID, None)}
  }
  #[inline]
  pub fn session_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContextMessage::VT_SESSION_ID, None)}
  }
  #[inline]
  pub fn environment(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContextMessage::VT_ENVIRONMENT, None)}
  }
  #[inline]
  pub fn app_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContextMessage::VT_APP_NAME, None)}
  }
  #[inline]
  pub fn current_time(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContextMessage::VT_CURRENT_TIME, None)}
  }
  #[inline]
  pub fn remote_address(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContextMessage::VT_REMOTE_ADDRESS, None)}
  }
  #[inline]
  pub fn runtime_hostname(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContextMessage::VT_RUNTIME_HOSTNAME, None)}
  }
  #[inline]
  pub fn properties(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PropertyEntry<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PropertyEntry>>>>(ContextMessage::VT_PROPERTIES, None)}
  }
  #[inline]
  pub fn custom_strategies_results(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CustomStrategyResult<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CustomStrategyResult>>>>(ContextMessage::VT_CUSTOM_STRATEGIES_RESULTS, None)}
  }
}

impl flatbuffers::Verifiable for ContextMessage<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("toggle_name", Self::VT_TOGGLE_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("user_id", Self::VT_USER_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("session_id", Self::VT_SESSION_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("environment", Self::VT_ENVIRONMENT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("app_name", Self::VT_APP_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("current_time", Self::VT_CURRENT_TIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("remote_address", Self::VT_REMOTE_ADDRESS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("runtime_hostname", Self::VT_RUNTIME_HOSTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PropertyEntry>>>>("properties", Self::VT_PROPERTIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<CustomStrategyResult>>>>("custom_strategies_results", Self::VT_CUSTOM_STRATEGIES_RESULTS, false)?
     .finish();
    Ok(())
  }
}
pub struct ContextMessageArgs<'a> {
    pub toggle_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub user_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub session_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub environment: Option<flatbuffers::WIPOffset<&'a str>>,
    pub app_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub current_time: Option<flatbuffers::WIPOffset<&'a str>>,
    pub remote_address: Option<flatbuffers::WIPOffset<&'a str>>,
    pub runtime_hostname: Option<flatbuffers::WIPOffset<&'a str>>,
    pub properties: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PropertyEntry<'a>>>>>,
    pub custom_strategies_results: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CustomStrategyResult<'a>>>>>,
}
impl<'a> Default for ContextMessageArgs<'a> {
  #[inline]
  fn default() -> Self {
    ContextMessageArgs {
      toggle_name: None,
      user_id: None,
      session_id: None,
      environment: None,
      app_name: None,
      current_time: None,
      remote_address: None,
      runtime_hostname: None,
      properties: None,
      custom_strategies_results: None,
    }
  }
}

pub struct ContextMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ContextMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_toggle_name(&mut self, toggle_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_TOGGLE_NAME, toggle_name);
  }
  #[inline]
  pub fn add_user_id(&mut self, user_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_USER_ID, user_id);
  }
  #[inline]
  pub fn add_session_id(&mut self, session_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_SESSION_ID, session_id);
  }
  #[inline]
  pub fn add_environment(&mut self, environment: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_ENVIRONMENT, environment);
  }
  #[inline]
  pub fn add_app_name(&mut self, app_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_APP_NAME, app_name);
  }
  #[inline]
  pub fn add_current_time(&mut self, current_time: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_CURRENT_TIME, current_time);
  }
  #[inline]
  pub fn add_remote_address(&mut self, remote_address: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_REMOTE_ADDRESS, remote_address);
  }
  #[inline]
  pub fn add_runtime_hostname(&mut self, runtime_hostname: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_RUNTIME_HOSTNAME, runtime_hostname);
  }
  #[inline]
  pub fn add_properties(&mut self, properties: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PropertyEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_PROPERTIES, properties);
  }
  #[inline]
  pub fn add_custom_strategies_results(&mut self, custom_strategies_results: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<CustomStrategyResult<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContextMessage::VT_CUSTOM_STRATEGIES_RESULTS, custom_strategies_results);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ContextMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ContextMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ContextMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ContextMessage<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ContextMessage");
      ds.field("toggle_name", &self.toggle_name());
      ds.field("user_id", &self.user_id());
      ds.field("session_id", &self.session_id());
      ds.field("environment", &self.environment());
      ds.field("app_name", &self.app_name());
      ds.field("current_time", &self.current_time());
      ds.field("remote_address", &self.remote_address());
      ds.field("runtime_hostname", &self.runtime_hostname());
      ds.field("properties", &self.properties());
      ds.field("custom_strategies_results", &self.custom_strategies_results());
      ds.finish()
  }
}
pub enum CustomStrategyResultOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CustomStrategyResult<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CustomStrategyResult<'a> {
  type Inner = CustomStrategyResult<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CustomStrategyResult<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CustomStrategyResult { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args CustomStrategyResultArgs<'args>
  ) -> flatbuffers::WIPOffset<CustomStrategyResult<'bldr>> {
    let mut builder = CustomStrategyResultBuilder::new(_fbb);
    if let Some(x) = args.key { builder.add_key(x); }
    builder.add_value(args.value);
    builder.finish()
  }


  #[inline]
  pub fn key(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CustomStrategyResult::VT_KEY, None).unwrap()}
  }
  #[inline]
  pub fn key_compare_less_than(&self, o: &CustomStrategyResult) -> bool {
    self.key() < o.key()
  }

  #[inline]
  pub fn key_compare_with_value(&self, val: & str) -> ::core::cmp::Ordering {
    let key = self.key();
    key.cmp(val)
  }
  #[inline]
  pub fn value(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CustomStrategyResult::VT_VALUE, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CustomStrategyResult<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("key", Self::VT_KEY, true)?
     .visit_field::<bool>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct CustomStrategyResultArgs<'a> {
    pub key: Option<flatbuffers::WIPOffset<&'a str>>,
    pub value: bool,
}
impl<'a> Default for CustomStrategyResultArgs<'a> {
  #[inline]
  fn default() -> Self {
    CustomStrategyResultArgs {
      key: None, // required field
      value: false,
    }
  }
}

pub struct CustomStrategyResultBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> CustomStrategyResultBuilder<'a, 'b> {
  #[inline]
  pub fn add_key(&mut self, key: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CustomStrategyResult::VT_KEY, key);
  }
  #[inline]
  pub fn add_value(&mut self, value: bool) {
    self.fbb_.push_slot::<bool>(CustomStrategyResult::VT_VALUE, value, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CustomStrategyResultBuilder<'a, 'b> {
    let start = _fbb.start_table();
    CustomStrategyResultBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CustomStrategyResult<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, CustomStrategyResult::VT_KEY,"key");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CustomStrategyResult<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CustomStrategyResult");
      ds.field("key", &self.key());
      ds.field("value", &self.value());
      ds.finish()
  }
}
pub enum ResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Response<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Response<'a> {
  type Inner = Response<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Response<'a> {
  pub const VT_ENABLED: flatbuffers::VOffsetT = 4;
  pub const VT_IMPRESSION_DATA: flatbuffers::VOffsetT = 6;
  pub const VT_HAS_ENABLED: flatbuffers::VOffsetT = 8;
  pub const VT_ERROR: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Response { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<Response<'bldr>> {
    let mut builder = ResponseBuilder::new(_fbb);
    if let Some(x) = args.error { builder.add_error(x); }
    builder.add_has_enabled(args.has_enabled);
    builder.add_impression_data(args.impression_data);
    builder.add_enabled(args.enabled);
    builder.finish()
  }


  #[inline]
  pub fn enabled(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Response::VT_ENABLED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn impression_data(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Response::VT_IMPRESSION_DATA, Some(false)).unwrap()}
  }
  #[inline]
  pub fn has_enabled(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Response::VT_HAS_ENABLED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn error(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Response::VT_ERROR, None)}
  }
}

impl flatbuffers::Verifiable for Response<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("enabled", Self::VT_ENABLED, false)?
     .visit_field::<bool>("impression_data", Self::VT_IMPRESSION_DATA, false)?
     .visit_field::<bool>("has_enabled", Self::VT_HAS_ENABLED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("error", Self::VT_ERROR, false)?
     .finish();
    Ok(())
  }
}
pub struct ResponseArgs<'a> {
    pub enabled: bool,
    pub impression_data: bool,
    pub has_enabled: bool,
    pub error: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    ResponseArgs {
      enabled: false,
      impression_data: false,
      has_enabled: false,
      error: None,
    }
  }
}

pub struct ResponseBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ResponseBuilder<'a, 'b> {
  #[inline]
  pub fn add_enabled(&mut self, enabled: bool) {
    self.fbb_.push_slot::<bool>(Response::VT_ENABLED, enabled, false);
  }
  #[inline]
  pub fn add_impression_data(&mut self, impression_data: bool) {
    self.fbb_.push_slot::<bool>(Response::VT_IMPRESSION_DATA, impression_data, false);
  }
  #[inline]
  pub fn add_has_enabled(&mut self, has_enabled: bool) {
    self.fbb_.push_slot::<bool>(Response::VT_HAS_ENABLED, has_enabled, false);
  }
  #[inline]
  pub fn add_error(&mut self, error: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Response::VT_ERROR, error);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ResponseBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Response<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Response<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Response");
      ds.field("enabled", &self.enabled());
      ds.field("impression_data", &self.impression_data());
      ds.field("has_enabled", &self.has_enabled());
      ds.field("error", &self.error());
      ds.finish()
  }
}
pub enum VariantOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Variant<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Variant<'a> {
  type Inner = Variant<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Variant<'a> {
  pub const VT_ENABLED: flatbuffers::VOffsetT = 4;
  pub const VT_IMPRESSION_DATA: flatbuffers::VOffsetT = 6;
  pub const VT_FEATURE_ENABLED: flatbuffers::VOffsetT = 8;
  pub const VT_NAME: flatbuffers::VOffsetT = 10;
  pub const VT_PAYLOAD: flatbuffers::VOffsetT = 12;
  pub const VT_ERROR: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Variant { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args VariantArgs<'args>
  ) -> flatbuffers::WIPOffset<Variant<'bldr>> {
    let mut builder = VariantBuilder::new(_fbb);
    if let Some(x) = args.error { builder.add_error(x); }
    if let Some(x) = args.payload { builder.add_payload(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_feature_enabled(args.feature_enabled);
    builder.add_impression_data(args.impression_data);
    builder.add_enabled(args.enabled);
    builder.finish()
  }


  #[inline]
  pub fn enabled(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Variant::VT_ENABLED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn impression_data(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Variant::VT_IMPRESSION_DATA, Some(false)).unwrap()}
  }
  #[inline]
  pub fn feature_enabled(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Variant::VT_FEATURE_ENABLED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Variant::VT_NAME, None)}
  }
  #[inline]
  pub fn payload(&self) -> Option<VariantPayload<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<VariantPayload>>(Variant::VT_PAYLOAD, None)}
  }
  #[inline]
  pub fn error(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Variant::VT_ERROR, None)}
  }
}

impl flatbuffers::Verifiable for Variant<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("enabled", Self::VT_ENABLED, false)?
     .visit_field::<bool>("impression_data", Self::VT_IMPRESSION_DATA, false)?
     .visit_field::<bool>("feature_enabled", Self::VT_FEATURE_ENABLED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<VariantPayload>>("payload", Self::VT_PAYLOAD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("error", Self::VT_ERROR, false)?
     .finish();
    Ok(())
  }
}
pub struct VariantArgs<'a> {
    pub enabled: bool,
    pub impression_data: bool,
    pub feature_enabled: bool,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub payload: Option<flatbuffers::WIPOffset<VariantPayload<'a>>>,
    pub error: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for VariantArgs<'a> {
  #[inline]
  fn default() -> Self {
    VariantArgs {
      enabled: false,
      impression_data: false,
      feature_enabled: false,
      name: None,
      payload: None,
      error: None,
    }
  }
}

pub struct VariantBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> VariantBuilder<'a, 'b> {
  #[inline]
  pub fn add_enabled(&mut self, enabled: bool) {
    self.fbb_.push_slot::<bool>(Variant::VT_ENABLED, enabled, false);
  }
  #[inline]
  pub fn add_impression_data(&mut self, impression_data: bool) {
    self.fbb_.push_slot::<bool>(Variant::VT_IMPRESSION_DATA, impression_data, false);
  }
  #[inline]
  pub fn add_feature_enabled(&mut self, feature_enabled: bool) {
    self.fbb_.push_slot::<bool>(Variant::VT_FEATURE_ENABLED, feature_enabled, false);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Variant::VT_NAME, name);
  }
  #[inline]
  pub fn add_payload(&mut self, payload: flatbuffers::WIPOffset<VariantPayload<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<VariantPayload>>(Variant::VT_PAYLOAD, payload);
  }
  #[inline]
  pub fn add_error(&mut self, error: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Variant::VT_ERROR, error);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> VariantBuilder<'a, 'b> {
    let start = _fbb.start_table();
    VariantBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Variant<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Variant<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Variant");
      ds.field("enabled", &self.enabled());
      ds.field("impression_data", &self.impression_data());
      ds.field("feature_enabled", &self.feature_enabled());
      ds.field("name", &self.name());
      ds.field("payload", &self.payload());
      ds.field("error", &self.error());
      ds.finish()
  }
}
pub enum VariantPayloadOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct VariantPayload<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VariantPayload<'a> {
  type Inner = VariantPayload<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VariantPayload<'a> {
  pub const VT_PAYLOAD_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VariantPayload { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args VariantPayloadArgs<'args>
  ) -> flatbuffers::WIPOffset<VariantPayload<'bldr>> {
    let mut builder = VariantPayloadBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    if let Some(x) = args.payload_type { builder.add_payload_type(x); }
    builder.finish()
  }


  #[inline]
  pub fn payload_type(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(VariantPayload::VT_PAYLOAD_TYPE, None)}
  }
  #[inline]
  pub fn value(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(VariantPayload::VT_VALUE, None)}
  }
}

impl flatbuffers::Verifiable for VariantPayload<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("payload_type", Self::VT_PAYLOAD_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct VariantPayloadArgs<'a> {
    pub payload_type: Option<flatbuffers::WIPOffset<&'a str>>,
    pub value: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for VariantPayloadArgs<'a> {
  #[inline]
  fn default() -> Self {
    VariantPayloadArgs {
      payload_type: None,
      value: None,
    }
  }
}

pub struct VariantPayloadBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> VariantPayloadBuilder<'a, 'b> {
  #[inline]
  pub fn add_payload_type(&mut self, payload_type: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VariantPayload::VT_PAYLOAD_TYPE, payload_type);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VariantPayload::VT_VALUE, value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> VariantPayloadBuilder<'a, 'b> {
    let start = _fbb.start_table();
    VariantPayloadBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VariantPayload<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VariantPayload<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VariantPayload");
      ds.field("payload_type", &self.payload_type());
      ds.field("value", &self.value());
      ds.finish()
  }
}
pub enum VariantEntryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct VariantEntry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VariantEntry<'a> {
  type Inner = VariantEntry<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VariantEntry<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VariantEntry { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args VariantEntryArgs<'args>
  ) -> flatbuffers::WIPOffset<VariantEntry<'bldr>> {
    let mut builder = VariantEntryBuilder::new(_fbb);
    builder.add_value(args.value);
    if let Some(x) = args.key { builder.add_key(x); }
    builder.finish()
  }


  #[inline]
  pub fn key(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(VariantEntry::VT_KEY, None)}
  }
  #[inline]
  pub fn value(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(VariantEntry::VT_VALUE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for VariantEntry<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("key", Self::VT_KEY, false)?
     .visit_field::<u32>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct VariantEntryArgs<'a> {
    pub key: Option<flatbuffers::WIPOffset<&'a str>>,
    pub value: u32,
}
impl<'a> Default for VariantEntryArgs<'a> {
  #[inline]
  fn default() -> Self {
    VariantEntryArgs {
      key: None,
      value: 0,
    }
  }
}

pub struct VariantEntryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> VariantEntryBuilder<'a, 'b> {
  #[inline]
  pub fn add_key(&mut self, key: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VariantEntry::VT_KEY, key);
  }
  #[inline]
  pub fn add_value(&mut self, value: u32) {
    self.fbb_.push_slot::<u32>(VariantEntry::VT_VALUE, value, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> VariantEntryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    VariantEntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VariantEntry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VariantEntry<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VariantEntry");
      ds.field("key", &self.key());
      ds.field("value", &self.value());
      ds.finish()
  }
}
pub enum ToggleStatsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ToggleStats<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ToggleStats<'a> {
  type Inner = ToggleStats<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ToggleStats<'a> {
  pub const VT_NO: flatbuffers::VOffsetT = 4;
  pub const VT_YES: flatbuffers::VOffsetT = 6;
  pub const VT_VARIANTS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ToggleStats { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ToggleStatsArgs<'args>
  ) -> flatbuffers::WIPOffset<ToggleStats<'bldr>> {
    let mut builder = ToggleStatsBuilder::new(_fbb);
    if let Some(x) = args.variants { builder.add_variants(x); }
    builder.add_yes(args.yes);
    builder.add_no(args.no);
    builder.finish()
  }


  #[inline]
  pub fn no(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ToggleStats::VT_NO, Some(0)).unwrap()}
  }
  #[inline]
  pub fn yes(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ToggleStats::VT_YES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn variants(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VariantEntry<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VariantEntry>>>>(ToggleStats::VT_VARIANTS, None)}
  }
}

impl flatbuffers::Verifiable for ToggleStats<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("no", Self::VT_NO, false)?
     .visit_field::<u32>("yes", Self::VT_YES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<VariantEntry>>>>("variants", Self::VT_VARIANTS, false)?
     .finish();
    Ok(())
  }
}
pub struct ToggleStatsArgs<'a> {
    pub no: u32,
    pub yes: u32,
    pub variants: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VariantEntry<'a>>>>>,
}
impl<'a> Default for ToggleStatsArgs<'a> {
  #[inline]
  fn default() -> Self {
    ToggleStatsArgs {
      no: 0,
      yes: 0,
      variants: None,
    }
  }
}

pub struct ToggleStatsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ToggleStatsBuilder<'a, 'b> {
  #[inline]
  pub fn add_no(&mut self, no: u32) {
    self.fbb_.push_slot::<u32>(ToggleStats::VT_NO, no, 0);
  }
  #[inline]
  pub fn add_yes(&mut self, yes: u32) {
    self.fbb_.push_slot::<u32>(ToggleStats::VT_YES, yes, 0);
  }
  #[inline]
  pub fn add_variants(&mut self, variants: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<VariantEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ToggleStats::VT_VARIANTS, variants);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ToggleStatsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ToggleStatsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ToggleStats<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ToggleStats<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ToggleStats");
      ds.field("no", &self.no());
      ds.field("yes", &self.yes());
      ds.field("variants", &self.variants());
      ds.finish()
  }
}
pub enum CoreVersionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CoreVersion<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CoreVersion<'a> {
  type Inner = CoreVersion<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CoreVersion<'a> {
  pub const VT_VERSION: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CoreVersion { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args CoreVersionArgs<'args>
  ) -> flatbuffers::WIPOffset<CoreVersion<'bldr>> {
    let mut builder = CoreVersionBuilder::new(_fbb);
    if let Some(x) = args.version { builder.add_version(x); }
    builder.finish()
  }


  #[inline]
  pub fn version(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CoreVersion::VT_VERSION, None)}
  }
}

impl flatbuffers::Verifiable for CoreVersion<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("version", Self::VT_VERSION, false)?
     .finish();
    Ok(())
  }
}
pub struct CoreVersionArgs<'a> {
    pub version: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for CoreVersionArgs<'a> {
  #[inline]
  fn default() -> Self {
    CoreVersionArgs {
      version: None,
    }
  }
}

pub struct CoreVersionBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> CoreVersionBuilder<'a, 'b> {
  #[inline]
  pub fn add_version(&mut self, version: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CoreVersion::VT_VERSION, version);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CoreVersionBuilder<'a, 'b> {
    let start = _fbb.start_table();
    CoreVersionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CoreVersion<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CoreVersion<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CoreVersion");
      ds.field("version", &self.version());
      ds.finish()
  }
}
pub enum BuiltInStrategiesOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BuiltInStrategies<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BuiltInStrategies<'a> {
  type Inner = BuiltInStrategies<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BuiltInStrategies<'a> {
  pub const VT_VALUES: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BuiltInStrategies { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args BuiltInStrategiesArgs<'args>
  ) -> flatbuffers::WIPOffset<BuiltInStrategies<'bldr>> {
    let mut builder = BuiltInStrategiesBuilder::new(_fbb);
    if let Some(x) = args.values { builder.add_values(x); }
    builder.finish()
  }


  #[inline]
  pub fn values(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(BuiltInStrategies::VT_VALUES, None)}
  }
}

impl flatbuffers::Verifiable for BuiltInStrategies<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("values", Self::VT_VALUES, false)?
     .finish();
    Ok(())
  }
}
pub struct BuiltInStrategiesArgs<'a> {
    pub values: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for BuiltInStrategiesArgs<'a> {
  #[inline]
  fn default() -> Self {
    BuiltInStrategiesArgs {
      values: None,
    }
  }
}

pub struct BuiltInStrategiesBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BuiltInStrategiesBuilder<'a, 'b> {
  #[inline]
  pub fn add_values(&mut self, values: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BuiltInStrategies::VT_VALUES, values);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BuiltInStrategiesBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BuiltInStrategiesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BuiltInStrategies<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BuiltInStrategies<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BuiltInStrategies");
      ds.field("values", &self.values());
      ds.finish()
  }
}
pub enum ToggleEntryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ToggleEntry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ToggleEntry<'a> {
  type Inner = ToggleEntry<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ToggleEntry<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ToggleEntry { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ToggleEntryArgs<'args>
  ) -> flatbuffers::WIPOffset<ToggleEntry<'bldr>> {
    let mut builder = ToggleEntryBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    if let Some(x) = args.key { builder.add_key(x); }
    builder.finish()
  }


  #[inline]
  pub fn key(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ToggleEntry::VT_KEY, None)}
  }
  #[inline]
  pub fn value(&self) -> Option<ToggleStats<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ToggleStats>>(ToggleEntry::VT_VALUE, None)}
  }
}

impl flatbuffers::Verifiable for ToggleEntry<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("key", Self::VT_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ToggleStats>>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct ToggleEntryArgs<'a> {
    pub key: Option<flatbuffers::WIPOffset<&'a str>>,
    pub value: Option<flatbuffers::WIPOffset<ToggleStats<'a>>>,
}
impl<'a> Default for ToggleEntryArgs<'a> {
  #[inline]
  fn default() -> Self {
    ToggleEntryArgs {
      key: None,
      value: None,
    }
  }
}

pub struct ToggleEntryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ToggleEntryBuilder<'a, 'b> {
  #[inline]
  pub fn add_key(&mut self, key: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ToggleEntry::VT_KEY, key);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<ToggleStats<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ToggleStats>>(ToggleEntry::VT_VALUE, value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ToggleEntryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ToggleEntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ToggleEntry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ToggleEntry<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ToggleEntry");
      ds.field("key", &self.key());
      ds.field("value", &self.value());
      ds.finish()
  }
}
pub enum MetricsResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MetricsResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MetricsResponse<'a> {
  type Inner = MetricsResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MetricsResponse<'a> {
  pub const VT_START: flatbuffers::VOffsetT = 4;
  pub const VT_STOP: flatbuffers::VOffsetT = 6;
  pub const VT_TOGGLES: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MetricsResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args MetricsResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<MetricsResponse<'bldr>> {
    let mut builder = MetricsResponseBuilder::new(_fbb);
    builder.add_stop(args.stop);
    builder.add_start(args.start);
    if let Some(x) = args.toggles { builder.add_toggles(x); }
    builder.finish()
  }


  #[inline]
  pub fn start(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MetricsResponse::VT_START, Some(0)).unwrap()}
  }
  #[inline]
  pub fn stop(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MetricsResponse::VT_STOP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn toggles(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ToggleEntry<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ToggleEntry>>>>(MetricsResponse::VT_TOGGLES, None)}
  }
}

impl flatbuffers::Verifiable for MetricsResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("start", Self::VT_START, false)?
     .visit_field::<i64>("stop", Self::VT_STOP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ToggleEntry>>>>("toggles", Self::VT_TOGGLES, false)?
     .finish();
    Ok(())
  }
}
pub struct MetricsResponseArgs<'a> {
    pub start: i64,
    pub stop: i64,
    pub toggles: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ToggleEntry<'a>>>>>,
}
impl<'a> Default for MetricsResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    MetricsResponseArgs {
      start: 0,
      stop: 0,
      toggles: None,
    }
  }
}

pub struct MetricsResponseBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> MetricsResponseBuilder<'a, 'b> {
  #[inline]
  pub fn add_start(&mut self, start: i64) {
    self.fbb_.push_slot::<i64>(MetricsResponse::VT_START, start, 0);
  }
  #[inline]
  pub fn add_stop(&mut self, stop: i64) {
    self.fbb_.push_slot::<i64>(MetricsResponse::VT_STOP, stop, 0);
  }
  #[inline]
  pub fn add_toggles(&mut self, toggles: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ToggleEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MetricsResponse::VT_TOGGLES, toggles);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MetricsResponseBuilder<'a, 'b> {
    let start = _fbb.start_table();
    MetricsResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MetricsResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MetricsResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MetricsResponse");
      ds.field("start", &self.start());
      ds.field("stop", &self.stop());
      ds.field("toggles", &self.toggles());
      ds.finish()
  }
}
pub enum TakeStateResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TakeStateResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TakeStateResponse<'a> {
  type Inner = TakeStateResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TakeStateResponse<'a> {
  pub const VT_WARNINGS: flatbuffers::VOffsetT = 4;
  pub const VT_ERROR: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TakeStateResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TakeStateResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<TakeStateResponse<'bldr>> {
    let mut builder = TakeStateResponseBuilder::new(_fbb);
    if let Some(x) = args.error { builder.add_error(x); }
    if let Some(x) = args.warnings { builder.add_warnings(x); }
    builder.finish()
  }


  #[inline]
  pub fn warnings(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(TakeStateResponse::VT_WARNINGS, None)}
  }
  #[inline]
  pub fn error(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TakeStateResponse::VT_ERROR, None)}
  }
}

impl flatbuffers::Verifiable for TakeStateResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("warnings", Self::VT_WARNINGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("error", Self::VT_ERROR, false)?
     .finish();
    Ok(())
  }
}
pub struct TakeStateResponseArgs<'a> {
    pub warnings: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub error: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for TakeStateResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    TakeStateResponseArgs {
      warnings: None,
      error: None,
    }
  }
}

pub struct TakeStateResponseBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TakeStateResponseBuilder<'a, 'b> {
  #[inline]
  pub fn add_warnings(&mut self, warnings: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TakeStateResponse::VT_WARNINGS, warnings);
  }
  #[inline]
  pub fn add_error(&mut self, error: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TakeStateResponse::VT_ERROR, error);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TakeStateResponseBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TakeStateResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TakeStateResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TakeStateResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TakeStateResponse");
      ds.field("warnings", &self.warnings());
      ds.field("error", &self.error());
      ds.finish()
  }
}
pub enum FeatureDefOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FeatureDef<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FeatureDef<'a> {
  type Inner = FeatureDef<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FeatureDef<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 6;
  pub const VT_PROJECT: flatbuffers::VOffsetT = 8;
  pub const VT_ENABLED: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FeatureDef { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args FeatureDefArgs<'args>
  ) -> flatbuffers::WIPOffset<FeatureDef<'bldr>> {
    let mut builder = FeatureDefBuilder::new(_fbb);
    if let Some(x) = args.project { builder.add_project(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_enabled(args.enabled);
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FeatureDef::VT_NAME, None)}
  }
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FeatureDef::VT_TYPE_, None)}
  }
  #[inline]
  pub fn project(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FeatureDef::VT_PROJECT, None)}
  }
  #[inline]
  pub fn enabled(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FeatureDef::VT_ENABLED, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for FeatureDef<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("project", Self::VT_PROJECT, false)?
     .visit_field::<bool>("enabled", Self::VT_ENABLED, false)?
     .finish();
    Ok(())
  }
}
pub struct FeatureDefArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub project: Option<flatbuffers::WIPOffset<&'a str>>,
    pub enabled: bool,
}
impl<'a> Default for FeatureDefArgs<'a> {
  #[inline]
  fn default() -> Self {
    FeatureDefArgs {
      name: None,
      type_: None,
      project: None,
      enabled: false,
    }
  }
}

pub struct FeatureDefBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FeatureDefBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FeatureDef::VT_NAME, name);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FeatureDef::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_project(&mut self, project: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FeatureDef::VT_PROJECT, project);
  }
  #[inline]
  pub fn add_enabled(&mut self, enabled: bool) {
    self.fbb_.push_slot::<bool>(FeatureDef::VT_ENABLED, enabled, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FeatureDefBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FeatureDefBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FeatureDef<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FeatureDef<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FeatureDef");
      ds.field("name", &self.name());
      ds.field("type_", &self.type_());
      ds.field("project", &self.project());
      ds.field("enabled", &self.enabled());
      ds.finish()
  }
}
pub enum FeatureDefsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FeatureDefs<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FeatureDefs<'a> {
  type Inner = FeatureDefs<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FeatureDefs<'a> {
  pub const VT_ITEMS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FeatureDefs { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args FeatureDefsArgs<'args>
  ) -> flatbuffers::WIPOffset<FeatureDefs<'bldr>> {
    let mut builder = FeatureDefsBuilder::new(_fbb);
    if let Some(x) = args.items { builder.add_items(x); }
    builder.finish()
  }


  #[inline]
  pub fn items(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FeatureDef<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FeatureDef>>>>(FeatureDefs::VT_ITEMS, None)}
  }
}

impl flatbuffers::Verifiable for FeatureDefs<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<FeatureDef>>>>("items", Self::VT_ITEMS, false)?
     .finish();
    Ok(())
  }
}
pub struct FeatureDefsArgs<'a> {
    pub items: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FeatureDef<'a>>>>>,
}
impl<'a> Default for FeatureDefsArgs<'a> {
  #[inline]
  fn default() -> Self {
    FeatureDefsArgs {
      items: None,
    }
  }
}

pub struct FeatureDefsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FeatureDefsBuilder<'a, 'b> {
  #[inline]
  pub fn add_items(&mut self, items: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<FeatureDef<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FeatureDefs::VT_ITEMS, items);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FeatureDefsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FeatureDefsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FeatureDefs<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FeatureDefs<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FeatureDefs");
      ds.field("items", &self.items());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `MetricsResponse`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_metrics_response_unchecked`.
pub fn root_as_metrics_response(buf: &[u8]) -> Result<MetricsResponse, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<MetricsResponse>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MetricsResponse` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_metrics_response_unchecked`.
pub fn size_prefixed_root_as_metrics_response(buf: &[u8]) -> Result<MetricsResponse, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<MetricsResponse>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MetricsResponse` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_metrics_response_unchecked`.
pub fn root_as_metrics_response_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MetricsResponse<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<MetricsResponse<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MetricsResponse` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_metrics_response_unchecked`.
pub fn size_prefixed_root_as_metrics_response_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MetricsResponse<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<MetricsResponse<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MetricsResponse and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MetricsResponse`.
pub unsafe fn root_as_metrics_response_unchecked(buf: &[u8]) -> MetricsResponse {
  flatbuffers::root_unchecked::<MetricsResponse>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MetricsResponse and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MetricsResponse`.
pub unsafe fn size_prefixed_root_as_metrics_response_unchecked(buf: &[u8]) -> MetricsResponse {
  flatbuffers::size_prefixed_root_unchecked::<MetricsResponse>(buf)
}
#[inline]
pub fn finish_metrics_response_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<MetricsResponse<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_metrics_response_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<MetricsResponse<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod messaging

