num = @{ int ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ int)? }
    int = { ("+" | "-")? ~ ASCII_DIGIT+ }

percentage = { ("100" | (ASCII_DIGIT ~ ASCII_DIGIT?)) ~ "%" }

string = @{ "\"" ~ ( !("\\\"" | "\"") ~ ANY | "\\" ~ "\"")* ~ "\"" }

semver = @{ ASCII_DIGIT+ ~ "."  ~ ASCII_DIGIT+ ~ "."  ~ ASCII_DIGIT+ ~ semver_patch? ~ semver_build? }
    semver_patch    = @{ "-" ~ semver_fragment }
    semver_build    = @{ "+" ~ semver_fragment }
        semver_fragment = @{ (ASCII_ALPHANUMERIC | "-")+ ~ ("." ~ (ASCII_ALPHANUMERIC | "-")+)* }

date = @{ quad_fragment ~ "-" ~ pair_fragment ~ "-" ~ pair_fragment ~ "T" ~ pair_fragment ~ ":" ~ pair_fragment ~ ":" ~ pair_fragment ~ ("." ~ trip_fragment)? ~ timezone_fragment }
    quad_fragment = @{ ASCII_DIGIT ~ ASCII_DIGIT ~ ASCII_DIGIT ~ ASCII_DIGIT }
    trip_fragment = @{ ASCII_DIGIT ~ ASCII_DIGIT ~ ASCII_DIGIT }
    pair_fragment = @{ ASCII_DIGIT ~ ASCII_DIGIT }
    timezone_fragment = @{ "Z" | (("+" | "-") ~ pair_fragment ~ ":" ~ pair_fragment) }

boolean = { "true" | "false" }

numeric_list = { "[" ~ num ~ ( "," ~ num )* ~ "]" }
// a special type that handles an empty list, this is because we
// can't infer the inner types of an empty list but practically this
// doesn't matter since they should resolve cleanly to a true/false
empty_list = { "[]" }
string_list = { "[" ~ string ~ ( "," ~ string )* ~ "]" }
semver_list = { "[" ~ semver ~ ( "," ~ semver )* ~ "]" }

WHITESPACE = _{ " " | "\t" }
NULL_COALESCE = _{ "|" }

random = { "random" }

boolean_operation = _{ and | or }
    and     = { "and" }
    or      = { "or" }

ordinal_operation = { lte | gte | lt | eq | gt }
    lte     = { "<=" }
    gte     = { ">=" }
    lt      = { "<" }
    eq      = { "==" }
    gt      = { ">" }

string_list_operation = { starts_with | ends_with | contains_any }
    starts_with = { "starts_with_any" }
    ends_with   = { "ends_with_any" }
    contains_any    = { "contains_any" }

string_list_operation_without_case = {
    starts_with_ignore_case
    | ends_with_ignore_case
    | contains_any_ignore_case
}
    starts_with_ignore_case     = { "starts_with_any_ignore_case" }
    ends_with_ignore_case       = { "ends_with_any_ignore_case" }
    contains_any_ignore_case    = { "contains_any_ignore_case" }

list_operation = { "in" | "not_in" }

invert_operation = { "!" }

constraint = {
    invert_operation* ~
    (
        rollout_constraint
        | date_constraint
        | semver_constraint
        | numeric_constraint
        | default_strategy_constraint
        | string_fragment_constraint
        | list_constraint
        | external_value
    )
}
    default_strategy_constraint = { boolean }
    string_fragment_constraint = { context_value ~ ( string_list_operation_without_case | string_list_operation ) ~ string_list }
    list_constraint = { context_value ~ list_operation ~ ( numeric_list | string_list | empty_list ) }
    date_constraint = { context_value ~ ordinal_operation ~ date }
    numeric_constraint = { context_value ~ ordinal_operation ~ num }
    semver_constraint = { context_value ~ ordinal_operation ~ semver }
    rollout_constraint = { percentage ~ stickiness_param? ~ group_id_param?}
        stickiness_param = { "sticky on " ~ context_value ~ ( NULL_COALESCE ~ context_value)* }
        group_id_param = { "with group_id of" ~ string }
    external_value = { "external_value[" ~ string ~ "]" }

context_value = { random | user_id | session_id | remote_address | app_name | environment | current_time | property }
    user_id         = { "user_id" }
    session_id      = { "session_id" }
    remote_address  = { "remote_address" }
    app_name        = { "app_name" }
    current_time    = { "current_time" }
    environment     = { "environment" }
    property        = { "context[" ~ string ~ "]" }


expr = { term ~ (boolean_operation ~ term)* }
term = _{ constraint | "(" ~ expr ~ ")" }

strategy = _{ SOI ~ expr ~ EOI }