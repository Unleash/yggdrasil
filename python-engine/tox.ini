[tox]
envlist =
    py{37,38,39,310,311,312,313}-{linux,windows,macosx,musllinux}_{x86_64,arm64}

skipsdist = true

[testenv]
deps = poetry
skip_install = true
allowlist_externals = rm, python, cp, mkdir

setenv =
    linux_x86_64: PLATFORM_TAG = manylinux2014_x86_64
    linux_x86_64: BINARY = libyggdrasilffi_x86_64.so
    linux_x86_64: OUTPUT_BINARY = libyggdrasilffi.so

    linux_arm64: PLATFORM_TAG = manylinux2014_aarch64
    linux_arm64: BINARY = libyggdrasilffi_arm64.so
    linux_arm64: OUTPUT_BINARY = libyggdrasilffi.so

    windows_x86_64: PLATFORM_TAG = win32
    windows_x86_64: BINARY = yggdrasilffi_x86_64.dll
    windows_x86_64: OUTPUT_BINARY = yggdrasilffi.dll

    windows_arm64: PLATFORM_TAG = win_amd64
    windows_arm64: BINARY = yggdrasilffi_arm64.dll
    windows_arm64: OUTPUT_BINARY = yggdrasilffi.dll

    macosx_x86_64: PLATFORM_TAG = macosx_11_0_x86_64
    macosx_x86_64: BINARY = libyggdrasilffi_x86_64.dylib
    macosx_x86_64: OUTPUT_BINARY = libyggdrasilffi.dylib

    macosx_arm64: PLATFORM_TAG = macosx_11_0_arm64
    macosx_arm64: BINARY = libyggdrasilffi_arm64.dylib
    macosx_arm64: OUTPUT_BINARY = libyggdrasilffi.dylib

    musllinux_x86_64: PLATFORM_TAG = musllinux_1_2_x86_64
    musllinux_x86_64: BINARY = libyggdrasilffi_x86_64-musl.so
    musllinux_x86_64: OUTPUT_BINARY = libyggdrasilffi.so

    musllinux_arm64: PLATFORM_TAG = musllinux_1_2_aarch64
    musllinux_arm64: BINARY = libyggdrasilffi_arm64-musl.so
    musllinux_arm64: OUTPUT_BINARY = libyggdrasilffi.so

commands =
    rm -rf dist yggdrasil_engine/lib
    mkdir -p staging yggdrasil_engine/lib

    cp binaries/{env:BINARY} yggdrasil_engine/lib/{env:OUTPUT_BINARY}

    poetry build
    python scripts/repair_wheel.py